// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

import Foundation

@objc internal class CorrelationVectorV2: CorrelationVectorBase, CorrelationVectorProtocol {

  /// The max length of a correlation vector.
  internal static let maxLength = 127

  /// The max length of a correlation vector base.
  internal static let baseLength = 22

  var version: CorrelationVectorVersion {
    return .v2
  }

  required convenience init() {
    self.init(UUID())
  }

  required convenience init(_ base: UUID) {
    self.init(baseUuid(from: base, baseLength: CorrelationVectorV2.baseLength), 0, false)
  }

  required init(_ base: String, _ extension: Int, _ immutable: Bool) {
    super.init(base, `extension`, immutable || isOversized(base, `extension`, maxLength: CorrelationVectorV2.maxLength))
  }

  func increment() -> String {
    return self.increment(maxLength: CorrelationVectorV2.maxLength)
  }

  static func parse(_ correlationVector: String?) -> CorrelationVectorProtocol {
    return parse(from: correlationVector)
  }

  static func extend(_ correlationVector: String?) throws -> CorrelationVectorProtocol {
    return try extend(correlationVector, baseLength: baseLength, maxLength: maxLength)
  }

  static func spin(_ correlationVector: String?, _ parameters: SpinParameters) throws -> CorrelationVectorProtocol {
    if isImmutable(correlationVector) {
      return parse(from: correlationVector)
    }
    if CorrelationVector.validateDuringCreation {
      try validate(correlationVector, baseLength: baseLength, maxLength: maxLength)
    }
    let ticks = Int64(Date().timeIntervalSince1970 * 10_000_000)
    var value = ticks >> parameters.interval.rawValue
    randomBytes(count: parameters.entropy.rawValue).forEach {
      value = (value << 8) | Int64($0)
    }

    // Generate a bitmask and mask the lower TotalBits in the value.
    // The mask is generated by (1 << totalBits) - 1. We need to handle the edge
    // case when shifting 64 bits, as it wraps around.
    value &= (parameters.totalBits == 64 ? 0 : 1 << parameters.totalBits) - 1;

    var s = "\(UInt32(value))"
    if parameters.totalBits > 32 {
      s = "\(UInt32(value >> 32))\(CorrelationVector.delimiter)\(s)"
    }
    let base = "\(correlationVector!)\(CorrelationVector.delimiter)\(s)"
    if isOversized(base, 0, maxLength: maxLength) {
      return parse(correlationVector! + CorrelationVector.terminator)
    }
    return self.init(base, 0, false)
  }
}
